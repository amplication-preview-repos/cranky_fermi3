/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Contratti } from "./Contratti";
import { ContrattiCountArgs } from "./ContrattiCountArgs";
import { ContrattiFindManyArgs } from "./ContrattiFindManyArgs";
import { ContrattiFindUniqueArgs } from "./ContrattiFindUniqueArgs";
import { CreateContrattiArgs } from "./CreateContrattiArgs";
import { UpdateContrattiArgs } from "./UpdateContrattiArgs";
import { DeleteContrattiArgs } from "./DeleteContrattiArgs";
import { ContrattiService } from "../contratti.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Contratti)
export class ContrattiResolverBase {
  constructor(
    protected readonly service: ContrattiService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "read",
    possession: "any",
  })
  async _contrattisMeta(
    @graphql.Args() args: ContrattiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Contratti])
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "read",
    possession: "any",
  })
  async contrattis(
    @graphql.Args() args: ContrattiFindManyArgs
  ): Promise<Contratti[]> {
    return this.service.contrattis(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Contratti, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "read",
    possession: "own",
  })
  async contratti(
    @graphql.Args() args: ContrattiFindUniqueArgs
  ): Promise<Contratti | null> {
    const result = await this.service.contratti(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Contratti)
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "create",
    possession: "any",
  })
  async createContratti(
    @graphql.Args() args: CreateContrattiArgs
  ): Promise<Contratti> {
    return await this.service.createContratti({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Contratti)
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "update",
    possession: "any",
  })
  async updateContratti(
    @graphql.Args() args: UpdateContrattiArgs
  ): Promise<Contratti | null> {
    try {
      return await this.service.updateContratti({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contratti)
  @nestAccessControl.UseRoles({
    resource: "Contratti",
    action: "delete",
    possession: "any",
  })
  async deleteContratti(
    @graphql.Args() args: DeleteContrattiArgs
  ): Promise<Contratti | null> {
    try {
      return await this.service.deleteContratti(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
