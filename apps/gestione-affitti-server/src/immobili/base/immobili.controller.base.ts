/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ImmobiliService } from "../immobili.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ImmobiliCreateInput } from "./ImmobiliCreateInput";
import { Immobili } from "./Immobili";
import { ImmobiliFindManyArgs } from "./ImmobiliFindManyArgs";
import { ImmobiliWhereUniqueInput } from "./ImmobiliWhereUniqueInput";
import { ImmobiliUpdateInput } from "./ImmobiliUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ImmobiliControllerBase {
  constructor(
    protected readonly service: ImmobiliService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Immobili })
  @nestAccessControl.UseRoles({
    resource: "Immobili",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createImmobili(
    @common.Body() data: ImmobiliCreateInput
  ): Promise<Immobili> {
    return await this.service.createImmobili({
      data: data,
      select: {
        canone: true,
        cap: true,
        caparraIniziale: true,
        categoriaCatasto: true,
        citt: true,
        classe: true,
        contratto: true,
        createdAt: true,
        descrizione: true,
        documenti: true,
        foglioCatastale: true,
        foto: true,
        id: true,
        imu: true,
        indirizzo: true,
        mq2: true,
        note: true,
        numero: true,
        numeroLocali: true,
        numeroLocaliAggiuntivi: true,
        paese: true,
        particella: true,
        partita: true,
        piani: true,
        regione: true,
        renditaCatastale: true,
        riferimentiCatastali: true,
        sezioneUrbana: true,
        spese: true,
        subalterno: true,
        tipoLocazione: true,
        tipologiaPropriet: true,
        updatedAt: true,
        zonaCensuaria: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Immobili] })
  @ApiNestedQuery(ImmobiliFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Immobili",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async immobilis(@common.Req() request: Request): Promise<Immobili[]> {
    const args = plainToClass(ImmobiliFindManyArgs, request.query);
    return this.service.immobilis({
      ...args,
      select: {
        canone: true,
        cap: true,
        caparraIniziale: true,
        categoriaCatasto: true,
        citt: true,
        classe: true,
        contratto: true,
        createdAt: true,
        descrizione: true,
        documenti: true,
        foglioCatastale: true,
        foto: true,
        id: true,
        imu: true,
        indirizzo: true,
        mq2: true,
        note: true,
        numero: true,
        numeroLocali: true,
        numeroLocaliAggiuntivi: true,
        paese: true,
        particella: true,
        partita: true,
        piani: true,
        regione: true,
        renditaCatastale: true,
        riferimentiCatastali: true,
        sezioneUrbana: true,
        spese: true,
        subalterno: true,
        tipoLocazione: true,
        tipologiaPropriet: true,
        updatedAt: true,
        zonaCensuaria: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Immobili })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Immobili",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async immobili(
    @common.Param() params: ImmobiliWhereUniqueInput
  ): Promise<Immobili | null> {
    const result = await this.service.immobili({
      where: params,
      select: {
        canone: true,
        cap: true,
        caparraIniziale: true,
        categoriaCatasto: true,
        citt: true,
        classe: true,
        contratto: true,
        createdAt: true,
        descrizione: true,
        documenti: true,
        foglioCatastale: true,
        foto: true,
        id: true,
        imu: true,
        indirizzo: true,
        mq2: true,
        note: true,
        numero: true,
        numeroLocali: true,
        numeroLocaliAggiuntivi: true,
        paese: true,
        particella: true,
        partita: true,
        piani: true,
        regione: true,
        renditaCatastale: true,
        riferimentiCatastali: true,
        sezioneUrbana: true,
        spese: true,
        subalterno: true,
        tipoLocazione: true,
        tipologiaPropriet: true,
        updatedAt: true,
        zonaCensuaria: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Immobili })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Immobili",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateImmobili(
    @common.Param() params: ImmobiliWhereUniqueInput,
    @common.Body() data: ImmobiliUpdateInput
  ): Promise<Immobili | null> {
    try {
      return await this.service.updateImmobili({
        where: params,
        data: data,
        select: {
          canone: true,
          cap: true,
          caparraIniziale: true,
          categoriaCatasto: true,
          citt: true,
          classe: true,
          contratto: true,
          createdAt: true,
          descrizione: true,
          documenti: true,
          foglioCatastale: true,
          foto: true,
          id: true,
          imu: true,
          indirizzo: true,
          mq2: true,
          note: true,
          numero: true,
          numeroLocali: true,
          numeroLocaliAggiuntivi: true,
          paese: true,
          particella: true,
          partita: true,
          piani: true,
          regione: true,
          renditaCatastale: true,
          riferimentiCatastali: true,
          sezioneUrbana: true,
          spese: true,
          subalterno: true,
          tipoLocazione: true,
          tipologiaPropriet: true,
          updatedAt: true,
          zonaCensuaria: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Immobili })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Immobili",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteImmobili(
    @common.Param() params: ImmobiliWhereUniqueInput
  ): Promise<Immobili | null> {
    try {
      return await this.service.deleteImmobili({
        where: params,
        select: {
          canone: true,
          cap: true,
          caparraIniziale: true,
          categoriaCatasto: true,
          citt: true,
          classe: true,
          contratto: true,
          createdAt: true,
          descrizione: true,
          documenti: true,
          foglioCatastale: true,
          foto: true,
          id: true,
          imu: true,
          indirizzo: true,
          mq2: true,
          note: true,
          numero: true,
          numeroLocali: true,
          numeroLocaliAggiuntivi: true,
          paese: true,
          particella: true,
          partita: true,
          piani: true,
          regione: true,
          renditaCatastale: true,
          riferimentiCatastali: true,
          sezioneUrbana: true,
          spese: true,
          subalterno: true,
          tipoLocazione: true,
          tipologiaPropriet: true,
          updatedAt: true,
          zonaCensuaria: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
