/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Utenti } from "./Utenti";
import { UtentiCountArgs } from "./UtentiCountArgs";
import { UtentiFindManyArgs } from "./UtentiFindManyArgs";
import { UtentiFindUniqueArgs } from "./UtentiFindUniqueArgs";
import { CreateUtentiArgs } from "./CreateUtentiArgs";
import { UpdateUtentiArgs } from "./UpdateUtentiArgs";
import { DeleteUtentiArgs } from "./DeleteUtentiArgs";
import { UtentiService } from "../utenti.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Utenti)
export class UtentiResolverBase {
  constructor(
    protected readonly service: UtentiService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "read",
    possession: "any",
  })
  async _utentisMeta(
    @graphql.Args() args: UtentiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Utenti])
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "read",
    possession: "any",
  })
  async utentis(@graphql.Args() args: UtentiFindManyArgs): Promise<Utenti[]> {
    return this.service.utentis(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Utenti, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "read",
    possession: "own",
  })
  async utenti(
    @graphql.Args() args: UtentiFindUniqueArgs
  ): Promise<Utenti | null> {
    const result = await this.service.utenti(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Utenti)
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "create",
    possession: "any",
  })
  async createUtenti(@graphql.Args() args: CreateUtentiArgs): Promise<Utenti> {
    return await this.service.createUtenti({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Utenti)
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "update",
    possession: "any",
  })
  async updateUtenti(
    @graphql.Args() args: UpdateUtentiArgs
  ): Promise<Utenti | null> {
    try {
      return await this.service.updateUtenti({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Utenti)
  @nestAccessControl.UseRoles({
    resource: "Utenti",
    action: "delete",
    possession: "any",
  })
  async deleteUtenti(
    @graphql.Args() args: DeleteUtentiArgs
  ): Promise<Utenti | null> {
    try {
      return await this.service.deleteUtenti(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
